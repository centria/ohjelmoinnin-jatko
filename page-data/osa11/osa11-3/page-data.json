{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa11/osa11-3",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tiedostojen käsittely\",\n  \"nav_order\": 113,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Olemme jo oppineet joitain strategioita tekstitiedostojen lukemiseen. Jos muistisi ovat hatarat, voit k\\xE4yd\\xE4 lukemassa aiheesta \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://centria.github.io/ohjelmoinnin-perusteet/osa4/osa4-3\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Peruskurssin nelj\\xE4nnest\\xE4 osasta\")), \". Siin\\xE4 materiaalissa k\\xE4ytimme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadAllLines\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadAllText\"), \" -metodeja. Niill\\xE4 on my\\xF6s kirjoitusversiot, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/file-system/how-to-write-to-a-text-file\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"joista voit lukea lis\\xE4\\xE4 t\\xE4\\xE4lt\\xE4\")), \". T\\xE4ss\\xE4 osiossa keskitymme kuitenkin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StreamWriter\"), \" -luokkaan jolla kirjoitetaan tiedostoon.\"), mdx(\"h2\", {\n    \"id\": \"streamwriter\"\n  }, \"StreamWriter\"), mdx(\"p\", null, \"Tarkastellaan seuraavaksi tiedostojen kirjoittamista. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.io.streamwriter?view=net-6.0\"\n  }, \"**StreamWriter\"), \" -luokka tarjoaa toiminnallisuuden tiedostojen kirjoittamiseen. Sen konstruktori saa parametrina merkkijonon, joka kuvaa kohdetiedoston sijaintia.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  using System;\\n  using System.IO;\\n\\n  class Program\\n  {\\n    public static void Main(string[] args)\\n    {\\n      StreamWriter writer = new StreamWriter(\\\"file.txt\\\");\\n      writer.WriteLine(\\\"Hello file!\\\"); // kirroittaa merkkijonon \\\"Hello file!\\\" ja vaihtaa rivi\\xE4 tiedostossa\\n      writer.WriteLine(\\\"More text\\\"); // kirjoittaa merkkijonon \\\"More text\\\" ja vaihtaa rivi\\xE4 tiedostossa\\n      writer.Write(\\\"And a little extra\\\"); // kirjoittaa merkkijonon \\\"And a little extra\\\" tiedostoon, mutta ei vaihda rivi\\xE4\\n      writer.Close(); // sulkee tiedoston\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Yll\\xE4 olevassa esimerkiss\\xE4 kirjoitamme tiedostoon \\\"file.txt\\\" merkkijonon \\\"Hello file!\\\", jonka j\\xE4lkeen vaihdamme rivi\\xE4 ja kirjoitamme lis\\xE4\\xE4 teksti\\xE4. Huomaa, ett\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Write\"), \"-metodi ei lis\\xE4\\xE4 rivinvaihtoa, vaan se pit\\xE4\\xE4 lis\\xE4t\\xE4 itse. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WriteLine\"), \"-metodi lis\\xE4\\xE4 rivinvaihdon parametrina saamansa merkkijonon per\\xE4\\xE4n.\"), mdx(\"p\", null, \"Luokan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StreamWriter\"), \" konstruktori saattaa heitt\\xE4\\xE4 poikkeuksen, joka on joko k\\xE4sitelt\\xE4v\\xE4 tai heitett\\xE4v\\xE4 eteenp\\xE4in, jolloin sen k\\xE4sittely on kutsuvan metodin vastuulla. Alla on esimerkki metodista, joka saa parametreina tiedoston nimen ja siihen kirjoitettavan tekstin.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  using System;\\n  using System.IO;\\n  public class Storer\\n  {\\n\\n    public void WriteToFile(string fileName, string text)\\n    {\\n      try\\n      {\\n        StreamWriter writer = new StreamWriter(fileName);\\n        writer.WriteLine(text);\\n        writer.Close();\\n      }\\n      catch (Exception e)\\n      {\\n        Console.WriteLine(e.Message);\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Metodissa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WriteToFile\"), \" luomme ensin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StreamWriter\"), \"-olion. Se kirjoittaa dataa tiedostoon, jonka polku on merkkijonossa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fileName\"), \". T\\xE4m\\xE4n j\\xE4lkeen kirjoitamme tiedostoon teksti\\xE4 kutsumalla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WriteLine\"), \"-metodia. Konstruktori saattaa heitt\\xE4\\xE4 poikkeuksen, joka on joko k\\xE4sitelt\\xE4v\\xE4 try-catch -lohkossa tai heitett\\xE4v\\xE4 eteenp\\xE4in. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WriteToFile\"), \"-metodissa k\\xE4yt\\xE4mme try-catch -lohkoa.\"), mdx(\"p\", null, \"Luodaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \"-metodi, joka kutsuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Storer\"), \"-olion \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WriteToFile\"), \"-metodia.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Storer storer = new Storer();\\nstorer.WriteToFile(\\\"diary.txt\\\", \\\"Dear diary, today was a good day.\\\");\\n\")), mdx(\"p\", null, \"Kutsumalla yll\\xE4 olevaa metodia luomme tiedoston nimelt\\xE4 \\\"diary.txt\\\" ja kirjoitamme siihen tekstin \\\"Dear diary, today was a good day.\\\". Jos tiedosto on jo olemassa, aiempi sis\\xE4lt\\xF6 pyyhkiytyy uuden tekstin tielt\\xE4.\"), mdx(\"h3\", {\n    \"id\": \"tiedon-lisääminen-tiedostoon\"\n  }, \"Tiedon lis\\xE4\\xE4minen tiedostoon\"), mdx(\"p\", null, \"Yll\\xE4 olevassa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Storer\"), \" luokassa kutsumme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StreamWriter\"), \"-luokan konstruktoria, joka saa parametrina tiedoston nimen. T\\xE4m\\xE4 tarkoittaa, ett\\xE4 joka kerta kun kutsutaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WriteToFile\"), \"-metodia, avataan tiedosto, kirjoitetaan siihen ja suljetaan tiedosto. T\\xE4m\\xE4 tarkoittaa, ett\\xE4 tiedostoon kirjoitetaan aina uusi sis\\xE4lt\\xF6, eik\\xE4 vanhaa sis\\xE4lt\\xF6\\xE4 s\\xE4ilytet\\xE4.\"), mdx(\"p\", null, \"Tietysti, yksi vaihtoehto olisi pit\\xE4\\xE4 tiedosto auki koko ajan, mutta se ei ole kovin j\\xE4rkev\\xE4\\xE4. Jos haluamme lis\\xE4t\\xE4 tietoa tiedostoon, voimme k\\xE4ytt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StreamWriter\"), \"-luokan \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learn.microsoft.com/en-us/dotnet/api/system.io.streamwriter.-ctor?view=net-6.0#overloads\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"ylikuormitettua konstruktoria\")), \".\"), mdx(\"p\", null, \"T\\xE4ll\\xE4 kertaa k\\xE4yt\\xE4mme \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learn.microsoft.com/en-us/dotnet/api/system.io.streamwriter.-ctor?view=net-6.0#System_IO_StreamWriter__ctor_System_String_System_Boolean_\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"StreamWriter(String, Boolean)\")), \", jossa totuusarvo m\\xE4\\xE4ritt\\xE4\\xE4, haluammeko lis\\xE4t\\xE4 tietoa tiedostoon, vai kirjoittaa sen yli. P\\xE4ivitet\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Storer\"), \"-luokkaamme seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  using System;\\n  using System.IO;\\n  public class Storer\\n  {\\n\\n    public void WriteToFile(string fileName, string text)\\n    {\\n      try\\n      {\\n        // Huomaa muutos parametreissa\\n        StreamWriter writer = new StreamWriter(fileName, true);\\n        writer.WriteLine(text);\\n        writer.Close();\\n      }\\n      catch (Exception e)\\n      {\\n        Console.WriteLine(e.Message);\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4ll\\xE4 muutoksella voimme kutsua metodia useammin kuin kerran, ja p\\xE4iv\\xE4kirja p\\xE4ivittyy kaikilla tiedoilla:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Storer storer = new Storer();\\nstorer.WriteToFile(\\\"diary.txt\\\", \\\"Dear diary, today was a good day.\\\");\\nstorer.WriteToFile(\\\"diary.txt\\\", \\\"Dear diary, today was a bad day.\\\");\\n\")), mdx(\"h2\", {\n    \"id\": \"tiedoston-tiettyjen-osien-korvaaminen\"\n  }, \"Tiedoston tiettyjen osien korvaaminen\"), mdx(\"p\", null, \"Joskus haluamme muuttaa jo olemassa olevaa tiedostoa. Yksinkertaisin tapa on kirjoittaa tiedoston sis\\xE4lt\\xF6 uudestaan. Ent\\xE4 jos haluamme korvata vain tietyn osan tiedostosta? Katsotaanpa t\\xE4t\\xE4 tarkemmin.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string str = File.ReadAllText(\\\"diary.txt\\\");\\nstr = str.Replace(\\\"Dear diary, today was a bad day.\\\", \\\"Dear diary, today was an exceptional day.\\\");\\nFile.WriteAllText(\\\"diary.txt\\\", str);\\n\")), mdx(\"p\", null, \"Yll\\xE4 olevassa esimerkiss\\xE4 k\\xE4yt\\xE4mme samaa \\\"diary.txt\\\" -tiedostoa kuin aiemmin, ja huonosta p\\xE4iv\\xE4st\\xE4 tuli poikkeuksellinen p\\xE4iv\\xE4.\"), mdx(\"p\", null, \"Voimme ladata koko tiedoston merkkijonoon, t\\xE4ll\\xE4 kertaa muuttujaan \\\"str\\\", tutulla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ReadAllText\"), \"-metodilla.\"), mdx(\"p\", null, \"Seuraavalla rivill\\xE4 k\\xE4yt\\xE4mme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Replace\"), \"-metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"String\"), \"-luokasta. T\\xE4m\\xE4 metodi etsii ensimm\\xE4isen\\xE4 parametrina annetun merkkijonon ja korvaa sen toisella parametrilla annetulla merkkijonolla.\"), mdx(\"p\", null, \"Esimerkiss\\xE4mme haluamme varmistaa, ett\\xE4 korvaamme koko rivin, mutta metodia voisi k\\xE4ytt\\xE4\\xE4 my\\xF6s vain osan rivist\\xE4.\"), mdx(\"p\", null, \"Kolmannella rivill\\xE4 k\\xE4yt\\xE4mme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WriteAllText\"), \"-metodia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File\"), \"-luokasta. T\\xE4m\\xE4 metodi kirjoittaa tiedon takaisin tiedostoon. Aivan kuten StreamWriter, t\\xE4m\\xE4kin ylikirjoittaa tiedoston sis\\xE4ll\\xF6n, mutta sulkee my\\xF6s tiedoston automaattisesti.\"), mdx(\"p\", null, \"Kuvitellaan, ett\\xE4 meill\\xE4 olisi suuri tiedosto, tai haluaisimme k\\xE4yd\\xE4 tiedostoa l\\xE4pi silmukalla. Seuraavassa esimerkiss\\xE4 teemme saman toiminnon, mutta k\\xE4yt\\xE4mme StreamWriteria ja for-silmukkaa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  string diary = \\\"diary.txt\\\";\\n  string[] lines = File.ReadAllLines(diary);\\n  StreamWriter sw = new StreamWriter(diary);\\n  for (int i = 0; i < lines.Length; i++)\\n  {\\n    string line = lines[i];\\n    if (lines[i].Contains(\\\"an exceptional\\\"))\\n    {\\n      line = \\\"Dear diary, today was an ordinary day.\\\";\\n    }\\n    sw.WriteLine(line);\\n  }\\n  sw.Close();\\n}\\n\")), mdx(\"p\", null, \"Ensimm\\xE4isell\\xE4 rivill\\xE4 tallennamme tiedoston polun muuttujaan, jotta meid\\xE4n ei tarvitse kirjoittaa sit\\xE4 joka kerta uudestaan. Eritt\\xE4in k\\xE4tev\\xE4\\xE4, varsinkin jos tiedosto ei ole samassa kansiossa kuin ohjelma.\"), mdx(\"p\", null, \"Toisella rivill\\xE4 tallennamme tiedoston sis\\xE4ll\\xF6n merkkijonotaulukkoon, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File.ReadAllLines\"), \"-metodilla. T\\xE4m\\xE4 metodi palauttaa iteroitavan version tiedoston sis\\xE4ll\\xF6st\\xE4.\"), mdx(\"p\", null, \"Seuraavaksi luomme uuden \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StreamWriter\"), \"-olion, ja annamme tiedoston nimen parametrina, jotta se voi nyt k\\xE4sitell\\xE4 tiedoston kirjoittamista ja tallentamista.\"), mdx(\"p\", null, \"Silmukassamme k\\xE4ymme tiedoston rivi rivilt\\xE4. Jos rivi sis\\xE4lt\\xE4\\xE4 \\\"an exceptional\\\", muutamme rivin sis\\xE4ll\\xF6n. K\\xE4yt\\xE4mme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WriteLine\"), \"-metodia rivin tallentamiseen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StreamWriter\"), \"-olion datavirtaan.\"), mdx(\"p\", null, \"Silmukan j\\xE4lkeen, k\\xE4yt\\xE4mme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Close\"), \"-metodia tallentaaksemme datavirran tiedostoon ja sulkeaksemme tiedoston.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Molemmat metodit lataavat alkuper\\xE4isen tiedoston j\\xE4rjestelm\\xE4n muistiin, niin **ReadAllLines** kuin **ReadAllText**. T\\xE4m\\xE4 on t\\xE4ysin ok pienille tiedostoille, mutta suuremmilla tiedostoilla t\\xE4yt\\xE4t nopeasti muistin ja kaadat j\\xE4rjestelm\\xE4n.\"), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '005 Saveable Dictionary',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"T\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4 luomme sanakirjan siten, ett\\xE4 se voi lukea sanoja tiedostosta ja kirjoittaa sanoja tiedostoon. Sanakirjan on my\\xF6s voitava k\\xE4\\xE4nt\\xE4\\xE4 sek\\xE4 toisesta kielest\\xE4 toiseen ett\\xE4 toisesta kielest\\xE4 toiseen (t\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4 emme ota huomioon sit\\xE4, ett\\xE4 jotkut sanat voivat olla kirjoitettu samalla tavalla sek\\xE4 suomeksi ett\\xE4 muilla kielill\\xE4). Teht\\xE4v\\xE4si on luoda sanakirja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SaveableDictionary\"), \" -luokassa.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Sanakirjaa varten, toteuta seuraavat metodit:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"public SaveableDictionary(), eli konstruktori ilman parametreja\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"public SaveableDictionary(string file) , eli konstruktori, joka saa parametrina tiedoston nimen. K\\xE4yt\\xE4mme t\\xE4t\\xE4 my\\xF6hemmin teht\\xE4v\\xE4ss\\xE4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"public void Add(string words, string translation) lis\\xE4\\xE4 sanakirjaan sanan ja sen k\\xE4\\xE4nn\\xF6ksen. Jokaisella sanalla on vain yksi k\\xE4\\xE4nn\\xF6s, ja jos sama sana lis\\xE4t\\xE4\\xE4n toisen kerran, ei tapahdu mit\\xE4\\xE4n. K\\xE4\\xE4nn\\xF6s toimii molempiin suuntiin.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"public string Translate(string word) palauttaa sanan k\\xE4\\xE4nn\\xF6ksen. Jos sanaa ei l\\xF6ydy sanakirjasta, palauttaa null.\")), mdx(\"p\", null, \"T\\xE4ss\\xE4 vaiheessa sanakirja toimii seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"SaveableDictionary dictionary = new SaveableDictionary();\\ndictionary.Add(\\\"apina\\\", \\\"monkey\\\");\\ndictionary.Add(\\\"banaani\\\", \\\"banana\\\");\\ndictionary.Add(\\\"apina\\\", \\\"apfe\\\");\\n\\nConsole.WriteLine(dictionary.Translate(\\\"apina\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"monkey\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"ohjelmointi\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"banana\\\"));      \\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"monkey\\napina\\n\\nbanaani\\n\")), mdx(\"p\", null, \"Kuten huomataan sy\\xF6tteest\\xE4, k\\xE4\\xE4nn\\xF6ksen lis\\xE4\\xE4misen j\\xE4lkeen sanakirja osaa k\\xE4\\xE4nt\\xE4\\xE4 sanan molempiin suuntiin.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Metodit Add ja Translate eiv\\xE4t lue tiedostosta eiv\\xE4tk\\xE4 kirjoita tiedostoon! Konstruktorit eiv\\xE4t my\\xF6sk\\xE4\\xE4n koske tiedostoon.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(\"p\", null, \"Lis\\xE4\\xE4 metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public void Delete(string word)\"), \", joka poistaa sanan ja sen k\\xE4\\xE4nn\\xF6ksen sanakirjasta. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"SaveableDictionary dictionary = new SaveableDictionary();\\ndictionary.Add(\\\"apina\\\", \\\"monkey\\\");\\ndictionary.Add(\\\"banaani\\\", \\\"banana\\\");\\ndictionary.Add(\\\"apina\\\", \\\"apfe\\\");\\ndictionary.Add(\\\"ohjelmointi\\\", \\\"programming\\\");\\n\\ndictionary.Delete(\\\"apina\\\");\\ndictionary.Delete(\\\"banana\\\");\\n\\nConsole.WriteLine(dictionary.Translate(\\\"apina\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"monkey\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"banana\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"banaani\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"ohjelmointi\\\"));\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"  \\n  \\n  \\n  \\nprogramming\\n\")), mdx(\"p\", null, \"Poistaminen toimii my\\xF6s molempiin suuntiin: sek\\xE4 sana ett\\xE4 sen k\\xE4\\xE4nn\\xF6s poistetaan, jos jompikumpi poistetaan.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3\")), mdx(\"p\", null, \"Aletaan k\\xE4ytt\\xE4m\\xE4\\xE4n konstruktoria \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public SaveableDictionary(string file)\"), \".\"), mdx(\"p\", null, \"Luodaan my\\xF6s metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public bool Load\"), \", joka lataa sanakirjan tiedostosta, joka on annettu konstruktorille parametrina. Jos tiedoston avaaminen tai lukeminen ei onnistu, palauttaa metodi false, muuten true.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Konstruktori ainoastaan kertoo sanakirjalle tiedoston nimen, josta ladata sanakirja. Konstruktori ei lue tiedostoa. Vain metodi Load lukee tiedoston.\"), mdx(\"p\", null, \"Sanakirjassa tiedoston rivi sis\\xE4lt\\xE4\\xE4 sanan ja sen k\\xE4\\xE4nn\\xF6ksen, jotka on erotettu toisistaan kaksoispisteell\\xE4. Teht\\xE4v\\xE4pohjassa on tiedosto words.txt, joka sis\\xE4lt\\xE4\\xE4 seuraavaa:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"apina:monkey\\nalla oleva:below\\nolut:beer\\n\")), mdx(\"p\", null, \"Voit erottaa rivin osat toisistaan metodilla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Split\"), \" t\\xE4h\\xE4n tapaan:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string[] parts = line.split(\\\":\\\");   // jako perustuen ':' merkkiin\\n\\nConsole.WriteLine(parts[0]);     // osa ennen :\\nConsole.WriteLine(parts[1]);     // osa : j\\xE4lkeen\\n\")), mdx(\"p\", null, \"Sanakirjaa voidaan nyt k\\xE4ytt\\xE4\\xE4 n\\xE4in:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"SaveableDictionary dictionary = new SaveableDictionary(\\\"words.txt\\\");\\nbool wasSuccessful = dictionary.Load();\\n\\nif (wasSuccessful) \\n{\\n  Console.WriteLine(\\\"Successfully loaded the dictionary from file\\\");\\n}\\n\\nConsole.WriteLine(dictionary.Translate(\\\"apina\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"ohjelmointi\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"alla oleva\\\"));\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Successfully loaded the dictionary from file\\nmonkey\\n\\nbelow\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osat 4 ja 5\")), mdx(\"p\", null, \"Luo metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public bool Save()\"), \", joka tallentaa sanakirjan tiedostoon, joka on annettu konstruktorille parametrina. Jos tiedoston avaaminen tai kirjoittaminen ei onnistu, palauttaa metodi false, muuten true. Sanakirjan tiedostot tulee tallentaa yll\\xE4 esitetyll\\xE4 tavalla, jotta sanakirja voi lukea tiedoston my\\xF6hemmin.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Vain Save()-metodi kirjoittaa tiedostoon!\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Valmiiden tiedostojen poistaminen, kuten words.txt, voi rikkoa joitain testej\\xE4 paikallisesti. Jos n\\xE4in k\\xE4y, luo tiedostot uudelleen oikealla sis\\xE4ll\\xF6ll\\xE4.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Vaikka sanakirja voi k\\xE4\\xE4nt\\xE4\\xE4 molempiin suuntiin, tiedostossa pit\\xE4isi sana olla vain yhteen suuntaan. Eli jos sanakirja tiet\\xE4\\xE4, ett\\xE4 tietokone = computer, tiedostossa pit\\xE4isi olla:\", mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"tietokone:computer\\n\")), mdx(\"p\", null, \"taikka\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"computer:tietokone\\n\")), mdx(\"p\", null, \"mutta ei molempia!\")), mdx(\"p\", null, \"On parasta k\\xE4sitell\\xE4 tallennus siten, ett\\xE4 koko sanakirja kirjoitetaan uudelleen tiedostoon, sen sijaan ett\\xE4 lis\\xE4t\\xE4\\xE4n uudet sanat tiedoston loppuun.\"), mdx(\"p\", null, \"Lopullinen versio sanakirjasta toimii seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// oleta, ett\\xE4 words.txt sis\\xE4lt\\xE4\\xE4 alkuun esitetyn sis\\xE4ll\\xF6n\\nSaveableDictionary dictionary = new SaveableDictionary(\\\"words.txt\\\");\\ndictionary.Load();\\n\\n// k\\xE4\\xE4nn\\xE4 kaikki sanat tiedostossa molempiin suuntiin\\nConsole.WriteLine(dictionary.Translate(\\\"apina\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"monkey\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"beer\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"olut\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"below\\\"));\\nConsole.WriteLine(dictionary.Translate(\\\"alla oleva\\\"));\\n\\n// Kokeile lis\\xE4t\\xE4, k\\xE4\\xE4nt\\xE4\\xE4 ja poistaa sana, t\\xE4m\\xE4n ei pit\\xE4isi vaikuttaa tiedostoon\\ndictionary.Add(\\\"poista\\\", \\\"remove\\\");\\nConsole.WriteLine(dictionary.Translate(\\\"remove\\\"));\\ndictionary.Delete(\\\"remove\\\");\\n\\n// Tallenna tiedosto\\ndictionary.Save();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"monkey\\napina\\nolut\\nbeer\\nalla oleva\\nbelow\\npoista\\n\")), mdx(\"p\", null, \"Eli alussa sanakirja lataa tiedot tiedostosta, ja lopussa tallentaa takaisin tiedostoon, jolloin sanakirjaan tehdyt muutokset pysyv\\xE4t tallessa seuraavaa k\\xE4ynnistyst\\xE4 varten.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#streamwriter","title":"StreamWriter","items":[{"url":"#tiedon-lisääminen-tiedostoon","title":"Tiedon lisääminen tiedostoon"}]},{"url":"#tiedoston-tiettyjen-osien-korvaaminen","title":"Tiedoston tiettyjen osien korvaaminen"}]},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Tiedostojen käsittely"}}},"pageContext":{"id":"27ea5402-7918-5abc-b12d-6a976e438472"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}