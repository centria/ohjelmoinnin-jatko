{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa11/osa11-2",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Poikkeukset\",\n  \"nav_order\": 112,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"poikkeukset-eli-exceptions\"\n  }, \"Poikkeukset eli Exceptions\"), mdx(\"p\", null, \"Kun ohjelman suoritus p\\xE4\\xE4ttyy virheeseen, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"heitet\\xE4\\xE4n poikkeus\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"throw exception\"), \"). Esimerkiksi ohjelma on voinut kutsua metodia, jolle annetaan null-viite ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NullReferenceException\"), \" heitet\\xE4\\xE4n, tai ohjelma on voinut yritt\\xE4\\xE4 viitata taulukon ulkopuolelle ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentOutOfRangeException\"), \" heitet\\xE4\\xE4n jne.\"), mdx(\"p\", null, \"Joihinkin poikkeuksiin meid\\xE4n tulisi aina varautua, kuten tiedoston lukemisen yhteydess\\xE4 tai ongelmiin verkkoyhteyden kanssa. Ajonaikaisiin poikkeuksiin, kuten NullReferenceException, meid\\xE4n ei tarvitse varautua etuk\\xE4teen. C# kertoo aina, jos koodissasi on lause tai lauseke, joka voi heitt\\xE4\\xE4 poikkeuksen, johon sinun tulee varautua.\"), mdx(\"h2\", {\n    \"id\": \"poikkeusten-kÃ¤sittely\"\n  }, \"Poikkeusten k\\xE4sittely\"), mdx(\"p\", null, \"Voimme k\\xE4ytt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"try {} catch (Exception e) {}\"), \" -lohkorakennetta poikkeusten k\\xE4sittelyyn. Avainsana \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"try\"), \" aloittaa lohkon, joka sis\\xE4lt\\xE4\\xE4 koodia, joka \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"saattaa\"), \" heitt\\xE4\\xE4 poikkeuksen. Mit\\xE4 tapahtuu, jos poikkeus heitet\\xE4\\xE4n try-lohkossa, m\\xE4\\xE4ritell\\xE4\\xE4n avainsanan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"catch\"), \" aloittamassa lohkossa. Avainsanan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"catch\"), \" j\\xE4lkeen tulee k\\xE4sitelt\\xE4v\\xE4n poikkeuksen tyyppi, esimerkiksi \\\"kaikki poikkeukset\\\" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"catch (Exception e)\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"try \\n{\\n  // koodia, joka saattaa heitt\\xE4\\xE4 poikkeuksen\\n} catch (Exception e) \\n{\\n  // koodilohko suoritetaan, jos poikkeus heitet\\xE4\\xE4n\\n}\\n\")), mdx(\"p\", null, \"Otamme poikkeuksesta kopin, (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"catch\"), \"), koska poikkeuksen aiheuttaminen on tietotekniikan termein poikkeuksen heitt\\xE4minen (englanniksi \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"throw\"), \"ing an exception\\\").\"), mdx(\"p\", null, \"Kuten yll\\xE4 mainittu, meid\\xE4n ei tarvitse varautua ajonaikaisiin poikkeuksiin, kuten NullReferenceException. Meid\\xE4n ei tarvitse k\\xE4sitell\\xE4 n\\xE4it\\xE4 poikkeuksia, joten ohjelman suoritus pys\\xE4htyy, jos virhe aiheuttaa poikkeuksen heitt\\xE4misen. Seuraavaksi katsomme yht\\xE4 t\\xE4llaista tilannetta, merkkijonojen muuttamista kokonaisluvuiksi.\"), mdx(\"p\", null, \"Olemme k\\xE4ytt\\xE4neet \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Convert.ToInt32\"), \" -metodia aiemmin. Metodi heitt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FormatException\"), \" -poikkeuksen, jos sille annettua merkkijonoa ei voida muuttaa kokonaisluvuksi.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"Give a number:\\\");\\nint number = Convert.ToInt32(Console.ReadLine());\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> hotPotato\\nUnhandled exception. System.FormatException: Input string was not in a correct format.\\n   at System.Number.ThrowOverflowOrFormatException(ParsingStatus status, TypeCode type)\\n   at System.Number.ParseInt32(ReadOnlySpan`1 value, NumberStyles styles, NumberFormatInfo info)\\n   at System.Convert.ToInt32(String value)\\n   at Exercise001.Program.Main(String[] args) in [. . .]]/Program.cs:line 12\\n\")), mdx(\"p\", null, \"Yll\\xE4 oleva ohjelma heitt\\xE4\\xE4 poikkeuksen, jos k\\xE4ytt\\xE4j\\xE4n sy\\xF6te ei ole kelvollinen kokonaisluku. Poikkeus aiheuttaa ohjelman suorituksen pys\\xE4htymisen.\"), mdx(\"p\", null, \"K\\xE4sitell\\xE4\\xE4n poikkeus. K\\xE4\\xE4rimme metodin kutsun, joka saattaa heitt\\xE4\\xE4 poikkeuksen, try-lohkoon ja poikkeuksen heitt\\xE4misen j\\xE4lkeen suoritettavan koodin catch-lohkoon.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"Give a number:\\\");\\nint number = 0;\\ntry\\n{\\n  number = Convert.ToInt32(Console.ReadLine());\\n}\\ncatch (Exception e)\\n{\\n  Console.WriteLine(e.Message);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> potato\\nInput string was not in a correct format.\\n\")), mdx(\"p\", null, \"Kuten n\\xE4hd\\xE4\\xE4n, k\\xE4ytimme my\\xF6s \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Exception\"), \" -luokan ominaisuutta. Kaikilla poikkeuksilla on viesti, ja sen voi k\\xE4ytt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"exception.Message\"), \" -ominaisuudella. Yrit\\xE4 l\\xF6yt\\xE4\\xE4 viesti poikkeuksesta, jota emme yll\\xE4 olevassa esimerkiss\\xE4 k\\xE4sitelleet.\"), mdx(\"p\", null, \"Koodi catch-lohkossa suoritetaan heti, jos try-lohkossa oleva koodi heitt\\xE4\\xE4 poikkeuksen. Voimme todistaa t\\xE4m\\xE4n lis\\xE4\\xE4m\\xE4ll\\xE4 tulostuksen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Convert.ToInt32\"), \" -metodin kutsun j\\xE4lkeen try-lohkossa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine(\\\"Give a number:\\\");\\nint number = 0;\\ntry\\n{\\n  number = Convert.ToInt32(Console.ReadLine());\\n  Console.WriteLine(\\\"Good job!\\\");\\n}\\ncatch (Exception e)\\n{\\n  Console.WriteLine(e.Message);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> 12\\nGood job!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number:\\n> potato\\nInput string was not in a correct format.\\n\")), mdx(\"p\", null, \"K\\xE4ytt\\xE4j\\xE4n sy\\xF6te, merkkijono \\\"potato\\\", annetaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Convert.ToInt32\"), \" -metodille parametrina. Metodi heitt\\xE4\\xE4 poikkeuksen, jos merkkijonoa ei voida muuttaa kokonaisluvuksi. Huomaa, ett\\xE4 koodi catch-lohkossa suoritetaan vain, jos poikkeus heitet\\xE4\\xE4n.\"), mdx(\"p\", null, \"Tehd\\xE4\\xE4n kokonaislukumuunnoksesta hieman hy\\xF6dyllisempi. Muutetaan se metodiksi, joka pyyt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4lt\\xE4 kokonaislukua, kunnes k\\xE4ytt\\xE4j\\xE4 antaa kelvollisen kokonaisluvun. Suoritus pys\\xE4htyy vasta, kun k\\xE4ytt\\xE4j\\xE4 antaa kelvollisen kokonaisluvun.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n  {\\n    ReadNumber();\\n  }\\n\\npublic static int ReadNumber()\\n{\\n  while (true)\\n  {\\n    Console.Write(\\\"Give a number: \\\");\\n    try\\n    {\\n      int readNumber = Convert.ToInt32(Console.ReadLine());\\n      return readNumber;\\n    }\\n    catch (Exception e)\\n    {\\n      Console.WriteLine(e.Message);\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Give a number: hotPotato\\nInput string was not in a correct format.\\nGive a number: Normal potato\\nInput string was not in a correct format.\\nGive a number: Spicy potato\\nInput string was not in a correct format.\\nGive a number: 12\\n\")), mdx(\"h2\", {\n    \"id\": \"tiedostovirheiden-kÃ¤sittely\"\n  }, \"Tiedostovirheiden k\\xE4sittely\"), mdx(\"p\", null, \"Yleinen k\\xE4ytt\\xF6tapaus try-catchille on tiedostojen lukeminen ja kirjoittaminen. T\\xE4h\\xE4n asti olemme luottaneet koodimme ja kirjoittamiemme tiedostopolkujen olevan oikein. Mutta mit\\xE4 tapahtuu, jos tiedostoa ei ole olemassa? Katsotaanpa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"string text = File.ReadAllText(\\\"fileDoesNotExist.txt\\\");\\nConsole.WriteLine(text);\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Huomaa, alla olevassa esimerkiss\\xE4 [. . .] on k\\xE4ytetty piilottamaan tiedoston koko polku. Todellisissa poikkeuksissa olisi t\\xE4ysi tiedostopolku.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Unhandled exception. System.IO.FileNotFoundException: Could not find file '[. . .]/fileDoesNotExist.txt'.\\nFile name: '[. . .]/fileDoesNotExist.txt'\\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\\n   at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options)\\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\\n   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)\\n   at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean detectEncodingFromByteOrderMarks)\\n   at System.IO.File.InternalReadAllText(String path, Encoding encoding)\\n   at System.IO.File.ReadAllText(String path)\\n   at Exercise001.Program.Main(String[] args) in [. . .]/Program.cs:line 12\\n\")), mdx(\"p\", null, \"Saamme aikamoisen kutsupinon, mutta t\\xE4rkeint\\xE4 on, ett\\xE4 saamme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FileNotFoundException\"), \". Kopataan se kiinni.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"try\\n{\\n  string text = File.ReadAllText(\\\"fileDoesNotExist.txt\\\");\\n  Console.WriteLine(text);\\n}\\ncatch (Exception e)\\n{\\n  Console.WriteLine(e.Message);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Could not find file '[. . .]/fileDoesNotExist.txt'.\\n\")), mdx(\"p\", null, \"Nyt meill\\xE4 on paljon merkityksellisempi virhe, mutta my\\xF6sk\\xE4\\xE4n ohjelmamme ei kaatunut. Kokeillaan viel\\xE4 kerran tiedostolla, joka on olemassa. K\\xE4yt\\xE4n \\\"text.txt\\\" -tiedostoa ja tulostan sen sis\\xE4ll\\xF6n.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"try\\n{\\n  string text = File.ReadAllText(\\\"text.txt\\\");\\n  Console.WriteLine(text);\\n}\\ncatch (Exception e)\\n{\\n  Console.WriteLine(e.Message);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"This is a line\\nThis is second line\\nThis is 3rd\\nThis includes a double, 3.25\\nThis has \\\"quotes\\\"\\n\")), mdx(\"p\", null, \"Nyt tiedostomme on luettu, koodi try-lohkossa on suoritettu ja catch-lohkoa ei suoritettu, koska try-ehto toimi.\"), mdx(\"h2\", {\n    \"id\": \"vastuun-siirtÃ¤minen\"\n  }, \"Vastuun siirt\\xE4minen\"), mdx(\"p\", null, \"Niin metodit kuin konstruktoritkin voivat heitt\\xE4\\xE4 poikkeuksia. On olemassa karkeasti ottaen kahdenlaisia poikkeuksia. On poikkeuksia, joita meid\\xE4n tulee k\\xE4sitell\\xE4, ja poikkeuksia, joita meid\\xE4n ei tarvitse k\\xE4sitell\\xE4. Voimme k\\xE4sitell\\xE4 poikkeuksia k\\xE4\\xE4rim\\xE4ll\\xE4 koodin try-catch-lohkoon tai \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"heitt\\xE4m\\xE4ll\\xE4 poikkeuksen ulos metodista\"), \".\"), mdx(\"p\", null, \"Alla oleva koodi lukee parametrina annetun tiedoston rivi rivilt\\xE4. Tiedoston lukeminen voi heitt\\xE4\\xE4 poikkeuksen, esimerkiksi tiedostoa ei ole olemassa tai ohjelmalla ei ole lukuoikeuksia tiedostoon. T\\xE4m\\xE4n tyyppinen poikkeus on k\\xE4sitelt\\xE4v\\xE4. K\\xE4sittelemme poikkeuksen k\\xE4\\xE4rim\\xE4ll\\xE4 koodin try-catch-lohkoon. T\\xE4ss\\xE4 esimerkiss\\xE4 meill\\xE4 ei ole oikeastaan mit\\xE4\\xE4n teht\\xE4v\\xE4\\xE4 poikkeuksen kanssa, mutta tulostamme kuitenkin viestin k\\xE4ytt\\xE4j\\xE4lle.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  ReadLines(\\\"text.txt\\\").ForEach(Console.WriteLine);\\n}\\n\\n\\npublic static List<string> ReadLines(string fileName)\\n{\\n  List<string> list = new List<string>();\\n  try\\n  {\\n    string[] lines = File.ReadAllLines(fileName);\\n    list = new List<string>(lines);\\n  }\\n  catch (Exception e)\\n  {\\n    Console.WriteLine(e.Message);\\n  }\\n  return list;\\n}\\n\")), mdx(\"p\", null, \"Ohjelmoija voisi my\\xF6s j\\xE4tt\\xE4\\xE4 poikkeuksen k\\xE4sittelem\\xE4tt\\xE4 ja siirt\\xE4\\xE4 vastuun poikkeuksen k\\xE4sittelyst\\xE4 sille, joka kutsuu metodia. Voimme siirt\\xE4\\xE4 vastuun poikkeuksen k\\xE4sittelyst\\xE4 eteenp\\xE4in heitt\\xE4m\\xE4ll\\xE4 poikkeuksen ulos metodista. Huomaa, ett\\xE4 heitt\\xE4minen tapahtuu \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"throw new \", mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"ExceptionType\")), \" -k\\xE4skyll\\xE4 metodissa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  try\\n  {\\n    ReadLines(\\\"nonExistingFile.txt\\\").ForEach(Console.WriteLine);\\n  }\\n  catch (Exception e)\\n  {\\n    Console.WriteLine(\\\"Caught in Main!\\\");\\n  }\\n}\\n\\n\\npublic static List<string> ReadLines(string fileName)\\n{\\n  List<string> list = new List<string>();\\n  if (!File.Exists(fileName))\\n  {\\n    throw new System.IO.FileNotFoundException();\\n  }\\n  string[] lines = File.ReadAllLines(fileName);\\n  list = new List<string>(lines);\\n\\n  return list;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Caught in Main!\\n\")), mdx(\"h2\", {\n    \"id\": \"virheiden-heittÃ¤minen\"\n  }, \"Virheiden heitt\\xE4minen\"), mdx(\"p\", null, \"Edellisess\\xE4 otsikossa, heitimme jo ensimm\\xE4isen poikkeuksen. Katsotaan t\\xE4t\\xE4 hieman tarkemmin.\"), mdx(\"p\", null, \"Komento \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"throw\"), \" heitt\\xE4\\xE4 poikkeuksen. Esimerkiksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FormatException\"), \" voidaan tehd\\xE4 komennolla \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"throw new FormatException()\"), \". Seuraava koodi heitt\\xE4\\xE4 aina poikkeuksen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public static void Main(string[] args)\\n{\\n  throw new FormatException();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Unhandled exception. System.FormatException: One of the identified items was in an invalid format.\\n[. . .]\\n\")), mdx(\"p\", null, \"Yksi poikkeus, jota varten meid\\xE4n ei tarvitse oikeastaan varautua, on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentException\"), \". ArgumentException kertoo, ett\\xE4 metodille tai konstruktorille annetut parametrit ovat v\\xE4\\xE4r\\xE4t. Sit\\xE4 voidaan k\\xE4ytt\\xE4\\xE4, kun haluamme varmistaa tiettyjen parametrien arvot.\"), mdx(\"p\", null, \"Luodaan luokka Grade. Se saa konstruktorin parametrina kokonaisluvun, joka kuvaa arvosanaa.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  public class Grade\\n  {\\n    public int grade { get; }\\n\\n    public Grade(int grade)\\n    {\\n      this.grade = grade;\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Haluamme ett\\xE4 arvosana t\\xE4ytt\\xE4\\xE4 tietyt kriteerit. Arvosanan tulee olla kokonaisluku v\\xE4lilt\\xE4 0-5. Jos se on jotain muuta, haluamme heitt\\xE4\\xE4 poikkeuksen. Lis\\xE4t\\xE4\\xE4n konstruktoriin ehtolause, joka tarkistaa, t\\xE4yttyv\\xE4tk\\xF6 arvosanan kriteerit. Jos eiv\\xE4t, heit\\xE4mme \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentException\"), \":n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"throw new ArgumentException(\\\"Grade must be between 0 and 5.\\\");\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  using System;\\n  public class Grade\\n  {\\n    public int grade { get; }\\n\\n    public Grade(int grade)\\n    {\\n      if (grade < 0 || grade > 5)\\n      {\\n        throw new ArgumentException(\\\"Grade must be between 0 and 5.\\\");\\n      }\\n      this.grade = grade;\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Kokeillaan t\\xE4t\\xE4 toiminnassa\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Grade grade = new Grade(3);\\nConsole.WriteLine(grade.grade);\\n\\nGrade illegalGrade = new Grade(22);\\n// poikkeus tapahtuu, suoritus ei jatku t\\xE4st\\xE4 eteenp\\xE4in\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"3\\nUnhandled exception. System.ArgumentException: Grade must be between 0 and 5.\\n   [. . .]\\n\")), mdx(\"p\", null, \"Poikkeukset jotka on pakko k\\xE4sitell\\xE4 ovat poikkeuksia, jotka tarkistetaan k\\xE4\\xE4nn\\xF6saikana. T\\xE4st\\xE4 syyst\\xE4, jotkin poikkeukset on varauduttava k\\xE4sittelem\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"try-catch\"), \" -lohkolla tai heitt\\xE4m\\xE4ll\\xE4 ne ulos metodista \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"throws\"), \" -attribuutilla. Esimerkiksi tiedostojen k\\xE4sittelyyn liittyv\\xE4t poikkeukset, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IOException\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FileNotFoundException\"), \", ovat t\\xE4llaisia poikkeuksia.\"), mdx(\"p\", null, \"Joitain poikkeuksia ei tarkisteta k\\xE4\\xE4nn\\xF6saikana. Ne voivat tapahtua ohjelman suorituksen aikana. N\\xE4it\\xE4 poikkeuksia ei tarvitse k\\xE4sitell\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"try-catch\"), \" -lohkolla. Esimerkiksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentException\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NullReferenceException\"), \" ovat t\\xE4llaisia poikkeuksia.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Nyt osaamme heitt\\xE4\\xE4 omia poikkeuksia, jotka voidaan k\\xE4sitell\\xE4 kuten muitakin poikkeuksia.\"), mdx(\"h2\", {\n    \"id\": \"poikkeuksen-yksityiskohtia\"\n  }, \"Poikkeuksen yksityiskohtia\"), mdx(\"p\", null, \"Catch-lohko m\\xE4\\xE4ritt\\xE4\\xE4, mink\\xE4 poikkeuksen varalta valmistaudutaan catch (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Exception e\"), \"). Poikkeuksen yksityiskohdat tallennetaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"e\"), \"-muuttujaan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"try {\\n    // ohjelmakoodi, joka saattaa heitt\\xE4\\xE4 poikkeuksen\\n} catch (Exception e) {\\n    // yksityiskohdat poikkeuksesta tallennetaan muuttujaan e\\n}\\n\")), mdx(\"p\", null, \"Olemme jo k\\xE4ytt\\xE4neet ominaisuutta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Message\"), \". Siin\\xE4 on tallennettuna poikkeuksen kuvaus. Toinen hy\\xF6dyllinen ominaisuus on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StackTrace\"), \", joka antaa meille merkkijonoesityksen kutsupinosta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Unhandled exception. System.ArgumentException: Grade must be between 0 and 5.\\n   at Exercise001.Grade..ctor(Int32 grade) in [. . .]]/Grade.cs:line 14\\n   at Exercise001.Program.Main(String[] args) in []. . .]/Program.cs:line 14\\n\")), mdx(\"p\", null, \"Luemme kutsupinoa alhaalta yl\\xF6s. Pohjalla on ensimm\\xE4inen kutsu, joten ohjelman suoritus on alkanut \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main()\"), \"-metodista \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Program\"), \"-luokassa. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main()\"), \"-metodin 14. rivill\\xE4 luotiin uusi Grade-olio, jolle annettiin laittomat parametrit. Grade-luokan 14. rivill\\xE4 on konstruktori, joka heitti \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentException\"), \"-poikkeuksen. Poikkeuksen yksityiskohdat ovat hy\\xF6dyllisi\\xE4, kun yritet\\xE4\\xE4n paikantaa, miss\\xE4 virhe tapahtuu.\"), mdx(\"h1\", {\n    \"id\": \"tehtÃ¤vÃ¤t\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '003 ArgumentException',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Harjoitellaan hieman parametrien validointia \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentException\"), \"-poikkeuksella. Teht\\xE4v\\xE4ss\\xE4 on luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Luokan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Person\"), \" konstruktorin tulisi varmistaa, ett\\xE4 parametrina annettu nimi ei ole null, tyhj\\xE4 tai yli 40 merkki\\xE4 pitk\\xE4. Jos n\\xE4m\\xE4 ehdot eiv\\xE4t t\\xE4yty, konstruktorin tulisi heitt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentException\"), \".\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Olemattoman eli null-arvon vertailu pit\\xE4\\xE4 tehd\\xE4 ensimm\\xE4isen\\xE4, muussa tapauksessa voimme saada NullReferenceException-poikkeuksen oman poikkeuksemme sijaan.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(\"p\", null, \"Konstruktorissa, i\\xE4n tulisi olla v\\xE4lill\\xE4 0-120. Jos n\\xE4m\\xE4 ehdot eiv\\xE4t t\\xE4yty, konstruktorin tulisi heitt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ArgumentException\"), \".\")), mdx(Exercise, {\n    title: '004 Sensors and Temperature',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Meill\\xE4 on seuraava rajapinta k\\xE4ytett\\xE4viss\\xE4mme:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise004\\n{\\n  public interface ISensor\\n  {\\n    bool IsOn();    // palauttaa true jos sensori on p\\xE4\\xE4ll\\xE4\\n    void SetOn();      // laittaa sensonrin p\\xE4\\xE4lle\\n    void SetOff();     // laittaa sensorin pois p\\xE4\\xE4lt\\xE4\\n    int Read();        // palauttaa sensorin lukeman jos sensori on p\\xE4\\xE4ll\\xE4\\n                       // jos sensori ei ole p\\xE4\\xE4ll\\xE4, heitt\\xE4\\xE4 poikkeuksen InvalidOperationException\\n  }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Luo luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StandardSensor\"), \", joka toteuttaa rajapinnan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ISensor\"), \". \"), mdx(\"p\", null, \"T\\xE4m\\xE4 sensori on aina p\\xE4\\xE4ll\\xE4. Metodikutsut \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SetOn\"), \" ja \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SetOff\"), \" eiv\\xE4t vaikuta sensoriin (eiv\\xE4t tee mit\\xE4\\xE4n). Konstruktorin tulee ottaa yksi kokonaisluku parametrina ja metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Read\"), \" palauttaa parametrina annetun luvun.\"), mdx(\"p\", null, \"Esimerkki:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"StandardSensor ten = new StandardSensor(10);\\nStandardSensor minusFive = new StandardSensor(-5);\\n\\nConsole.WriteLine(ten.Read());\\nConsole.WriteLine(minusFive.Read());\\n\\nConsole.WriteLine(ten.IsOn());\\nten.SetOff();\\nConsole.WriteLine(ten.IsOn());\\n\")), mdx(\"p\", null, \"Sample output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"10\\n-5\\ntrue\\ntrue\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(\"p\", null, \"Luo luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TemperatureSensor\"), \", joka toteuttaa rajapinnan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ISensor\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Konstruktori ei ota parametreja.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alussa sensori on pois p\\xE4\\xE4lt\\xE4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kun metodia Read kutsutaan ja sensori on p\\xE4\\xE4ll\\xE4, sensori arpoo kokonaisluvun v\\xE4lilt\\xE4 -30...30 ja palauttaa sen.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jos sensori on pois p\\xE4\\xE4lt\\xE4, metodi Read heitt\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"InvalidOperationException\"), \"-poikkeuksen.\")), mdx(\"p\", null, \"Esimerkki:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"TemperatureSensor temperatureSensor = new TemperatureSensor();\\ntemperatureSensor.SetOn();\\nConsole.WriteLine(temperatureSensor.Read());\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"23\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#poikkeukset-eli-exceptions","title":"Poikkeukset eli Exceptions","items":[{"url":"#poikkeusten-kÃ¤sittely","title":"Poikkeusten kÃ¤sittely"},{"url":"#tiedostovirheiden-kÃ¤sittely","title":"Tiedostovirheiden kÃ¤sittely"},{"url":"#vastuun-siirtÃ¤minen","title":"Vastuun siirtÃ¤minen"},{"url":"#virheiden-heittÃ¤minen","title":"Virheiden heittÃ¤minen"},{"url":"#poikkeuksen-yksityiskohtia","title":"Poikkeuksen yksityiskohtia"}]},{"url":"#tehtÃ¤vÃ¤t","title":"TehtÃ¤vÃ¤t"}]},"frontmatter":{"title":"Poikkeukset"}}},"pageContext":{"id":"87311dda-bac5-5deb-b63f-7ab19d514f14"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}