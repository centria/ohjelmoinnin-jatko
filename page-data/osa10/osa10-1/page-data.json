{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa10/osa10-1",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Rajapinta IComparable\",\n  \"nav_order\": 101,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"icomparable\"\n  }, \"IComparable\"), mdx(\"p\", null, \"Edellisess\\xE4 osassa tutustuimme rajapintoihin yleisemm\\xE4ll\\xE4 tasolla - tutustutaan nyt yhteen C#:n valmiiseen rajapintaan. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1?view=net-6.0\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"IComparable-rajapinta\")), \" m\\xE4\\xE4rittelee olioiden vertailuun k\\xE4ytett\\xE4v\\xE4n \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.icomparable-1.compareto?view=net-6.0\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"CompareTo\")), \"-metodin. Jos luokka toteuttaa IComparable-rajapinnan, luokasta luodut oliot voidaan j\\xE4rjest\\xE4\\xE4 C#:n j\\xE4rjestysalgoritmeja k\\xE4ytt\\xE4en.\"), mdx(\"p\", null, \"Metodi CompareTo, jonka IComparable-rajapinta m\\xE4\\xE4rittelee, saa parametrinaan olion, johon \\\"t\\xE4t\\xE4\\\", \\\"this\\\", oliota verrataan. Jos \\\"t\\xE4m\\xE4\\\" olio tulee parametrina saadun olion j\\xE4lkeen j\\xE4rjestyksess\\xE4, metodin tulee palauttaa negatiivinen luku. Jos taas \\\"t\\xE4m\\xE4\\\" olio tulee parametrina saatua oliota ennen j\\xE4rjestyksess\\xE4, metodin tulee palauttaa positiivinen luku. Muussa tapauksessa palautetaan 0. CompareTo-metodin m\\xE4\\xE4rittelem\\xE4 j\\xE4rjestys on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"luonnollinen j\\xE4rjestys\"), \".\"), mdx(\"p\", null, \"Tarkastellaan t\\xE4t\\xE4 luokan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Member\"), \" avulla, joka kuvaa kerhoon kuuluvaa lasta tai nuorta. Jokaisella kerhon j\\xE4senell\\xE4 on nimi ja pituus. Kerhon j\\xE4senet menev\\xE4t sy\\xF6m\\xE4\\xE4n pituuden mukaan j\\xE4rjestyksess\\xE4, joten Member-luokan tulee toteuttaa IComparable-rajapinta. IComparable-rajapinta ottaa tyypin parametrinaan sen luokan, jota vertailu koskee. K\\xE4yt\\xE4mme t\\xE4ss\\xE4kin Member-luokkaa tyypin parametrina.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  // IComparable on nimiavaruudessa System\\n  using System;\\n  // Toteuta IComparable<Member>\\n  // Eksplisiittinen vertailu Member-luokan j\\xE4senille, ei muille olioille\\n  public class Member : IComparable<Member>\\n  {\\n    public string name { get; }\\n    public int height { get; }\\n\\n    // Peruskonstruktori\\n    public Member(string name, int height)\\n    {\\n      this.name = name;\\n      this.height = height;\\n    }\\n\\n    \\n    // CompareTo Member\\n    // T\\xE4t\\xE4 varten toteutamme IComparable<Member> rajapintaa\\n    // Pelk\\xE4ll\\xE4 IComparablella vertailisimme olioita\\n    // Metodilla CompareTo(object obj)\\n    public int CompareTo(Member member)\\n    {\\n      // jos vertailtava j\\xE4sen on null, palauta 1\\n      // \\\"this\\\" tulee nullin j\\xE4lkeen\\n      if (member == null)\\n      {\\n        return 1;\\n      }\\n      // jos pituudet ovat samat, palauta 0\\n      // ne ovat nyt vertailussa yht\\xE4 suuret\\n      if (this.height == member.height)\\n      {\\n        return 0;\\n      }\\n      // jos \\\"this\\\" pituus on suurempi\\n      // palauta 1\\n      // \\\"this\\\" tulee vertailussa j\\xE4lkimm\\xE4isen\\xE4\\n      else if (this.height > member.height)\\n      {\\n        return 1;\\n      }\\n      // Kun kaikki muut vaihtoehdot on k\\xE4yty l\\xE4pi\\n      // Palauta -1\\n      // \\\"this\\\" tulee vertailussa ensimm\\xE4isen\\xE4\\n      else\\n      {\\n        return -1;\\n      }\\n    }\\n\\n    // Perus ToString\\n    public override string ToString()\\n    {\\n      return this.name + \\\" (\\\" + this.height + \\\")\\\";\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Metodi CompareTo, jota IComparable-rajapinta m\\xE4\\xE4rittelee, palauttaa kokonaisluvun, joka kertoo vertailun tuloksen. \"), mdx(\"p\", null, \"Koska negatiivisen luvun palauttaminen metodista \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CompareTo()\"), \" riitt\\xE4\\xE4 kertomaan ett\\xE4 t\\xE4m\\xE4 olio on pienempi kuin parametrina saatu olio, ja nollan palauttaminen kertoo ett\\xE4 pituudet ovat samat, voidaan yll\\xE4 kuvattu CompareTo-metodi toteuttaa my\\xF6s seuraavasti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public int CompareTo(Member member)\\n{\\n  return this.height - member.height;\\n}\\n\")), mdx(\"p\", null, \"Koska \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Member\"), \"-luokka nyt toteuttaa IComparable-rajapinnan, on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Member\"), \"-luokan olioita mahdollista j\\xE4rjest\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sort\"), \"-metodilla. Itse asiassa mik\\xE4 tahansa luokka, joka toteuttaa IComparable-rajapinnan, voidaan j\\xE4rjest\\xE4\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sort\"), \"-metodilla. Esimerkiksi merkkijonot ja kokonaisluvut toteuttavat IComparable-rajapinnan.\"), mdx(\"p\", null, \"Kerhon j\\xE4senet voidaan nyt j\\xE4rjest\\xE4\\xE4 helposti.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Lista kerhon j\\xE4senist\\xE4, Member-olioita\\nList<Member> member = new List<Member>();\\n// Lis\\xE4t\\xE4\\xE4n kolme tavallist j\\xE4sent\\xE4\\nmember.Add(new Member(\\\"mikael\\\", 182));\\nmember.Add(new Member(\\\"matti\\\", 187));\\nmember.Add(new Member(\\\"ada\\\", 184));\\n// Ja null n\\xE4ytt\\xE4m\\xE4\\xE4n miten se j\\xE4rjestyy\\nmember.Add(null);\\n\\n// Tulostetaan kaikki j\\xE4senet\\nmember.ForEach(Console.WriteLine);\\n\\nConsole.WriteLine(\\\"Let's sort the members:\\\");\\n\\n// J\\xE4rjest\\xE4 lista\\nmember.Sort();\\n\\n// Tulostetaan kaikki j\\xE4senet\\nmember.ForEach(Console.WriteLine);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"mikael (182)\\nmatti (187)\\nada (184)\\n\\nLet's sort the members:\\n\\nmikael (182)\\nada (184)\\nmatti (187)\\n\")), mdx(\"p\", null, \"Luokka voi toteuttaa useita rajapintoja. Useita rajapintoja toteutetaan erottamalla toteutettavat rajapinnat pilkulla (public class ... : \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IEkaRajaPinta\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ITokaRajaPinta\"), \" ...). Useita rajapintoja toteutettaessa tulee toteuttaa kaikkien rajapintojen kaikki vaaditut metodit.\"), mdx(\"p\", null, \"Sanotaan, ett\\xE4 meill\\xE4 on vaikkapa seuraava \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IIdentifiable\"), \"-rajapinta.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public interface IIdentifiable\\n{\\n    string socialSecurityNumber { get; }\\n}\\n\")), mdx(\"p\", null, \"Haluamme luoda henkil\\xF6it\\xE4 luokalla Person, joka on sek\\xE4 tunnistettava ett\\xE4 j\\xE4rjestett\\xE4v\\xE4. T\\xE4m\\xE4 onnistuu toteuttamalla molemmat rajapinnat. Esimerkki on alla.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person : IIdentifiable, IComparable<Person>\\n{\\n    public string name { get; }\\n    public string socialSecurityNumber { get; }\\n\\n    public Person(string name, string socialSecurityNumber)\\n    {\\n        this.name = name;\\n        this.socialSecurityNumber = socialSecurityNumber;\\n    }\\n\\n    public int CompareTo(Person another)\\n    {\\n        return this.socialSecurityNumber.CompareTo(another.socialSecurityNumber);\\n    }\\n}\\n\")), mdx(\"p\", null, \"Tarkastellaan viel\\xE4 tilannetta, jossa vertailu tapahtuu hieman virheellisesti, esim. nimen perusteella:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person : IIdentifiable, IComparable<Person> {\\n    public string name { get; }\\n    public string socialSecurityNumber { get; }\\n\\n    public Person(string name, string socialSecurityNumber) {\\n        this.name = name;\\n        this.socialSecurityNumber = socialSecurityNumber;\\n    }\\n\\n    public int CompareTo(Person another) {\\n        return this.name.CompareTo(another.name)\\n    }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 ei ole tietenk\\xE4\\xE4n j\\xE4rkev\\xE4\\xE4, sill\\xE4 ihmisill\\xE4 voi olla sama nimi. Logiikka on kuitenkin korjattavissa, sill\\xE4 voimme tehd\\xE4 toisen vertailun. Jos haluamme pit\\xE4\\xE4 nimen ensimm\\xE4isen\\xE4 j\\xE4rjest\\xE4misperusteena ja sosiaaliturvatunnuksen toisena, voimme tehd\\xE4 seuraavanlaisen toteutuksen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"public class Person : IIdentifiable, IComparable<Person> {\\n    public string name { get; }\\n    public string socialSecurityNumber { get; }\\n\\n    public Person(string name, string socialSecurityNumber) {\\n        this.name = name;\\n        this.socialSecurityNumber = socialSecurityNumber;\\n    }\\n\\n    public int CompareTo(Person another) {\\n      if (this.name == another.name)\\n      {\\n        return this.socialSecurityNumber.CompareTo(another.socialSecurityNumber);\\n      }\\n      return this.name.CompareTo(another.name);\\n    }\\n}\\n\")), mdx(\"p\", null, \"T\\xE4ten voimme ensin tarkistaa nimen samankaltaisuuden ja j\\xE4rjest\\xE4\\xE4 sen mukaan. T\\xE4m\\xE4n j\\xE4lkeen voimme j\\xE4rjest\\xE4\\xE4 sosiaaliturvatunnuksen mukaan (Suomessa se on my\\xF6s henkil\\xF6n syntym\\xE4p\\xE4iv\\xE4).\"), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '001 Wage Order',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Sinulle on annettu luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Human\"), \". Ihmisell\\xE4 on nimi ja palkkatieto. Toteuta rajapinta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IComparable\"), \" siten, ett\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CompareTo\"), \"-metodi j\\xE4rjest\\xE4\\xE4 ihmiset palkan mukaan suurimmasta pienimp\\xE4\\xE4n. Program.cs sis\\xE4lt\\xE4\\xE4 jo seuraavan koodin, jolla voit kokeilla toteutustasi.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"List<Human> humans = new List<Human>();\\nhumans.Add(new Human(\\\"Merja\\\", 500));\\nhumans.Add(new Human(\\\"Pertti\\\", 80));\\nhumans.Add(new Human(\\\"Matti\\\", 150000));\\n\\n// J\\xE4rjest\\xE4\\xE4 listan kun CompareTo toimii\\n// Sort k\\xE4ytt\\xE4\\xE4 sis\\xE4isesti CompareTo-metodia\\nhumans.Sort();\\nhumans.ForEach(Console.WriteLine);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Matti 150000\\nMerja 500\\nPertti 80\\n\"))), mdx(Exercise, {\n    title: '002 Students in Alphabetical Order',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Student\"), \", jolla on nimi. Toteuta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Student\"), \"-luokkaan \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IComprable\"), \"-rajapinta siten, ett\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CompareTo\"), \"-metodi j\\xE4rjest\\xE4\\xE4 opiskelijat aakkosj\\xE4rjestykseen nimen perusteella.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Opiskelijan nimi on merkkijono, joka toteuttaa itsess\\xE4\\xE4n IComparable rajapintaa. Voit k\\xE4ytt\\xE4\\xE4 sit\\xE4 hyv\\xE4ksesi toteuttaessasi metodia Student-luokkaan. Huomaa, ett\\xE4 merkkijonon CompareTo on case sensitive, mutta t\\xE4ss\\xE4 teht\\xE4v\\xE4ss\\xE4 ei tarvitse huomioida sit\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Student first = new Student(\\\"jamo\\\");\\nStudent second = new Student(\\\"jamo1\\\");\\n\\n// Pit\\xE4isi tulostaa -1\\nConsole.WriteLine(first.CompareTo(second));\\n\"))), mdx(Exercise, {\n    title: '003 Literacy Comparison',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Luo ohjelma joka lukee k\\xE4ytt\\xE4j\\xE4lt\\xE4 sy\\xF6tteen\\xE4 kirjoja ja niiden ik\\xE4suosituksia.\"), mdx(\"p\", null, \"Ohjelma kysyy kirjan nime\\xE4 ja ik\\xE4suositusta kunnes k\\xE4ytt\\xE4j\\xE4 sy\\xF6tt\\xE4\\xE4 tyhj\\xE4n merkkijonon (pelkk\\xE4 enter). T\\xE4m\\xE4n j\\xE4lkeen ohjelma tulostaa kirjojen m\\xE4\\xE4r\\xE4n ja nimet.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Toteuta ensin kirjojen lukeminen ja tulostaminen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TextInterface\"), \"-luokassa, niiden j\\xE4rjestys ei ole viel\\xE4 t\\xE4rke\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input the name of the book, empty stops: \\n> The Ringing Lullaby Book \\nInput the age recommendation:\\n> 0\\nInput the name of the book, empty stops:\\n> The Exiting Transpotation Vehicles \\nInput the age recommendation:\\n> 0\\nInput the name of the book, empty stops:\\n> The Snowy Forest Calls \\nInput the age recommendation:\\n> 12\\nInput the name of the book, empty stops: \\n> Litmanen 10 \\nInput the age recommendation:\\n> 10\\nInput the name of the book, empty stops:\\n\\n4 books in total.\\n\\nBooks: \\nThe Ringing Lullaby Book (recommended for 0 year-olds or older) \\nThe Exiting Transpotation Vehicles (recommended for 0 year-olds or older) \\nThe Snowy Forest Calls (recommended for 12 year-olds or older) \\nLitmanen 10 (recommended for 10 year-olds or older)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(\"p\", null, \"Laajenna ohjelmaa siten, ett\\xE4 kirjat j\\xE4rjestet\\xE4\\xE4n niiden ik\\xE4suosituksen mukaan. Jos kahdella (tai useammalla) kirjalla on sama ik\\xE4suositus, niiden j\\xE4rjestys ei ole t\\xE4rke\\xE4. (eli luo CompareTo Book-luokkaan).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input the name of the book, empty stops: \\n> The Ringing Lullaby Book \\nInput the age recommendation:\\n> 0\\nInput the name of the book, empty stops:\\n> The Exiting Transpotation Vehicles \\nInput the age recommendation:\\n> 0\\nInput the name of the book, empty stops:\\n> The Snowy Forest Calls \\nInput the age recommendation:\\n> 12\\nInput the name of the book, empty stops: \\n> Litmanen 10 \\nInput the age recommendation:\\n> 10\\nInput the name of the book, empty stops:\\n\\n4 books in total.\\n\\nBooks: \\nThe Ringing Lullaby Book (recommended for 0 year-olds or older) \\nThe Exiting Transpotation Vehicles (recommended for 0 year-olds or older) \\nLitmanen 10 (recommended for 10 year-olds or older) \\nThe Snowy Forest Calls (recommended for 12 year-olds or older)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3\")), mdx(\"p\", null, \"Laajenna ohjelmaa siten, ett\\xE4 kirjat j\\xE4rjestet\\xE4\\xE4n ensin niiden ik\\xE4suosituksen mukaan ja toissijaisesti nimen mukaan aakkosj\\xE4rjestykseen.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Voit k\\xE4ytt\\xE4\\xE4 ehtorakennetta (if) ik\\xE4suosituksen vertailuun.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Input the name of the book, empty stops: \\n> The Ringing Lullaby Book \\nInput the age recommendation:\\n> 0\\nInput the name of the book, empty stops:\\n> The Exiting Transpotation Vehicles \\nInput the age recommendation:\\n> 0\\nInput the name of the book, empty stops:\\n> The Snowy Forest Calls \\nInput the age recommendation:\\n> 12\\nInput the name of the book, empty stops: \\n> Litmanen 10 \\nInput the age recommendation:\\n> 10\\nInput the name of the book, empty stops:\\n\\n4 books in total.\\n\\nBooks: \\nThe Exiting Transpotation Vehicles (recommended for 0 year-olds or older) \\nThe Ringing Lullaby Book (recommended for 0 year-olds or older) \\nLitmanen 10 (recommended for 10 year-olds or older) \\nThe Snowy Forest Calls (recommended for 12 year-olds or older)\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#icomparable","title":"IComparable"},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Rajapinta IComparable"}}},"pageContext":{"id":"29b28eed-3d61-51a2-947b-da035e759622"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}