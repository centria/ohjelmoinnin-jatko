{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa10/osa10-3",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Numeroituminen eli Enum\",\n  \"nav_order\": 103,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Exercise = makeShortcode(\"Exercise\");\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"numeroituva-tyyppi---enum\"\n  }, \"Numeroituva tyyppi - Enum\"), mdx(\"p\", null, \"Jos me tied\\xE4mme muuttujan mahdolliset arvot etuk\\xE4teen, voimme k\\xE4ytt\\xE4\\xE4 luokkaa joka on tyypilt\\xE4\\xE4n \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numeroituva\"), \" (englanniksi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"enumerating type\"), \"), eli \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"enum\"), \", eli voimme esitt\\xE4\\xE4 eri arvoja numeerisesti. Enumeroidut tyypit ovat omia tyyppej\\xE4\\xE4n, lis\\xE4ksi ne ovat normaaleja luokkia ja rajapintoja. Enumeroidun tyypin m\\xE4\\xE4rittelee avainsana \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"enum\"), \". Esimerkiksi seuraava Suit enum-luokka m\\xE4\\xE4rittelee nelj\\xE4 vakioarvoa: Diamond, Spade, Club ja Heart.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  public enum Suit\\n  {\\n    Diamond,\\n    Spade,\\n    Club,\\n    Heart\\n  }\\n}\\n\")), mdx(\"p\", null, \"Yksinkertaisimmillaan, enum listaa m\\xE4\\xE4ritt\\xE4m\\xE4ns\\xE4 vakioarvot pilkulla erotettuna. Enum-tyypit eli vakiot kirjoitetaan konvention mukaan isolla alkukirjaimella.\"), mdx(\"p\", null, \"Enum-luokka kirjoitetaan omaan tiedostoonsa, kuten luokat ja rajapinnatkin.\"), mdx(\"p\", null, \"Seuraavassa on Card-luokka, jossa m\\xE4\\xE4ritell\\xE4\\xE4n kortin maa enumina:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  public class Card\\n  {\\n    public int value { get; }\\n    public Suit suit { get; }\\n\\n    public Card(int value, Suit suit)\\n    {\\n      this.value = value;\\n      this.suit = suit;\\n    }\\n\\n    public override string ToString()\\n    {\\n      return suit + \\\" \\\" + value;\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Korttia k\\xE4ytet\\xE4\\xE4n seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"namespace Exercise001\\n{\\n  using System;\\n\\n  class Program\\n  {\\n    static void Main(string[] args)\\n    {\\n      Card first = new Card(10, Suit.Heart);\\n\\n      Console.WriteLine(first);\\n\\n      if (first.suit == Suit.Spade)\\n      {\\n        Console.WriteLine(\\\"is a spade\\\");\\n      }\\n      else\\n        Console.WriteLine(\\\"is not a spade\\\");\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Heart 10\\nis not a spade\\n\")), mdx(\"p\", null, \"N\\xE4emme ett\\xE4 Enumin arvot on tulostettu siististi! Enumista voit lukea lis\\xE4\\xE4 englanniksi \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Microsoftin dokumentaatiosta\")), \".\"), mdx(\"p\", null, \"Jokainen enumin arvo saa uniikin numerokoodin, ja niit\\xE4 voi verrata yht\\xE4suuruusmerkill\\xE4. Kuten muutkin c#-luokat, n\\xE4m\\xE4 arvot periv\\xE4t Object-luokan ja sen Equals-metodin. Equals-metodi vertailee enum-tyyppien tapauksessa n\\xE4it\\xE4 numeerisia tunnisteita.\"), mdx(\"p\", null, \"Numeerinen arvo enumille l\\xF6ytyy muuttamalla enumin arvo kokonaisluvuksi. Metodi palauttaa enumin arvon j\\xE4rjestysnumeron (tai indeksin) - jos enumin arvo on ensimm\\xE4inen, sen j\\xE4rjestysnumero on 0. Jos se on toinen, j\\xE4rjestysnumero on 1, ja niin edelleen. Esimerkiksi\"), mdx(\"p\", null, \"``\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Console.WriteLine((int)Suit.Spade);\\nConsole.WriteLine((int)Suit.Diamond);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"1\\n0\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '005 Sort Them Cards!',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4pohjassa on luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Card\"), \" joka esitt\\xE4\\xE4 pelikorttia. Kortilla on arvo ja maa.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 1\")), mdx(\"p\", null, \"Kortin arvo on numero v\\xE4lilt\\xE4 2-14. Kortin maa on joko \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Club, Diamond, Heart tai Spade\"), \". \\xC4ss\\xE4n arvo on 14. Arvo on esitetty kokonaislukuna, ja maa enumina.\"), mdx(\"p\", null, \"Kortilla on my\\xF6s metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ToString\"), \", joka palauttaa kortin arvon ja maan luettavassa muodossa.\"), mdx(\"p\", null, \"Korjaa ToString, ett\\xE4 se sis\\xE4lt\\xE4\\xE4 erikoismerkit kuvakorteille (J, Q, K ja A).\"), mdx(\"p\", null, \"Uusia kortteja voi luoda seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Card first = new Card(2, Suit.Diamond);\\nCard second = new Card(14, Suit.Spade);\\nCard third = new Card(12, Suit.Heart);\\n\\nConsole.WriteLine(first);\\nConsole.WriteLine(second);\\nConsole.WriteLine(third);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Diamond 2\\nSpade A\\nHeart Q\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"ToString-metodissa, pid\\xE4 huolta ett\\xE4 arvoille 11-14 (J, Q, K ja A) on omat palautuksensa.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 2\")), mdx(\"p\", null, \"Muuta luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Card\"), \" toteuttamaan rajapinta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IComparable\"), \". Toteuta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CompareTo\"), \"-metodi siten, ett\\xE4 kortit j\\xE4rjestet\\xE4\\xE4n nousevaan arvoj\\xE4rjestykseen. Jos korttien arvot ovat samat, ne j\\xE4rjestet\\xE4\\xE4n \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"club, diamond, heart ja spade\"), \" -j\\xE4rjestyksess\\xE4, eli enumien j\\xE4rjestyksess\\xE4.\"), mdx(\"p\", null, \"Joten t\\xE4h\\xE4n j\\xE4rjest\\xE4miseen, v\\xE4hiten arvokas kortti on Risti 2, ja korkein on Pata \\xC4ss\\xE4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Card first = new Card(2, Suit.Club);\\nCard second = new Card(14, Suit.Spade);\\nCard third = new Card(12, Suit.Heart);\\nCard fourth = new Card(14, Suit.Heart);\\nCard fifth = new Card(12, Suit.Diamond);\\n\\nList<Card> list = new List<Card> { first, second, third, fourth, fifth };\\nlist.Sort();\\nlist.ForEach(Console.WriteLine);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Club 2\\nDiamond Q\\nHeart Q\\nHeart A\\nSpade A\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 3\")), mdx(\"p\", null, \"Luo luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hand\"), \" joka esitt\\xE4\\xE4 pelaajan k\\xE4tt\\xE4. Lis\\xE4\\xE4 luokkaan seuraavat asiat:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"private List<Card\", \">\"), \" joka sis\\xE4lt\\xE4\\xE4 kortit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"public void Add(Card card)\"), \" lis\\xE4\\xE4 kortin k\\xE4teen. Jos kortti on jo k\\xE4dess\\xE4, joku huijaa, ja korttia ei pit\\xE4isi lis\\xE4t\\xE4. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"K\\xE4yt\\xE4 listaa korttien s\\xE4ilytt\\xE4miseen.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"public void Print()\"), \" tulostaa kortit k\\xE4dest\\xE4 kuten alla n\\xE4ytetty\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Hand hand = new Hand();\\n\\nhand.Add(new Card(2, Suit.Diamond));\\nhand.Add(new Card(14, Suit.Spade));\\nhand.Add(new Card(12, Suit.Heart));\\nhand.Add(new Card(2, Suit.Spade));\\n\\nhand.Print();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Diamond 2\\nSpade A\\nHeart Q\\nSpade 2\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 4\")), mdx(\"p\", null, \"Lis\\xE4\\xE4 metodi \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public void Sort()\"), \" luokkaan Hand, joka j\\xE4rjest\\xE4\\xE4 kortit k\\xE4dest\\xE4. J\\xE4rjest\\xE4misen j\\xE4lkeen kortit tulostetaan j\\xE4rjestyksess\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Hand hand = new Hand();\\n\\nhand.Add(new Card(2, Suit.Diamond));\\nhand.Add(new Card(14, Suit.Spade));\\nhand.Add(new Card(12, Suit.Heart));\\nhand.Add(new Card(2, Suit.Spade));\\n\\nhand.Sort();\\nhand.Print();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Diamond 2\\nSpade 2\\nHeart Q\\nSpade A\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Osa 5\")), mdx(\"p\", null, \"Korttipeliss\\xE4 k\\xE4det j\\xE4rjestet\\xE4\\xE4n korttien arvon summan mukaan. Muuta luokkaa \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hand\"), \" n\\xE4iden kriteerien mukaan, eli toteuttamaan rajapinta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IComparable\\\\<Hand\", \">\"), \". \"), mdx(\"p\", null, \"T\\xE4ss\\xE4 on esimerkki ohjelmasta, joka vertailee k\\xE4si\\xE4:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Hand hand1 = new Hand();\\n\\nhand1.Add(new Card(2, Suit.Diamond));\\nhand1.Add(new Card(14, Suit.Spade));\\nhand1.Add(new Card(12, Suit.Heart));\\nhand1.Add(new Card(2, Suit.Spade));\\n\\nHand hand2 = new Hand();\\n\\nhand2.Add(new Card(11, Suit.Diamond));\\nhand2.Add(new Card(11, Suit.Spade));\\nhand2.Add(new Card(11, Suit.Heart));\\n\\nint comparison = hand1.CompareTo(hand2);\\n\\nif (comparison < 0)\\n{\\n  Console.WriteLine(\\\"better hand is\\\");\\n  hand2.Print();\\n}\\nelse if (comparison > 0)\\n{\\n  Console.WriteLine(\\\"better hand is\\\");\\n  hand1.Print();\\n}\\nelse\\n{\\n  Console.WriteLine(\\\"hands are equal\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"better hand is\\nDiamond J\\nSpade J\\nHeart J\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#numeroituva-tyyppi---enum","title":"Numeroituva tyyppi - Enum"},{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Numeroituminen eli Enum"}}},"pageContext":{"id":"44c05cec-0db9-5437-8e5e-57be66b996ea"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}