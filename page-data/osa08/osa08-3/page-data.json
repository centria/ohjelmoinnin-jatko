{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/osa08/osa08-3",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Datan ryhmittely hakemistoilla\",\n  \"nav_order\": 83,\n  \"hidden\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar Exercise = makeShortcode(\"Exercise\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Hakemistolla voi olla korkeintaan yksi arvo per avain. Seuraavassa esimerkiss\\xE4 tallennamme ihmisten puhelinnumerot hakemistoon.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  Dictionary<string, string> phoneNumbers = new Dictionary<string, string>();\\n  \\n  phoneNumbers[\\\"Pekka\\\"] = \\\"040-12348765\\\";\\n  Console.WriteLine(\\\"Pekka's number \\\" + phoneNumbers[\\\"Pekka\\\"]);\\n\\n  phoneNumbers[\\\"Pekka\\\"] = \\\"09-111333\\\";\\n  Console.WriteLine(\\\"Pekka's number \\\" + phoneNumbers[\\\"Pekka\\\"]);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Pekka's number 040-12348765\\nPekka's number 09-111333\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Tapa jolla k\\xE4ytimme hakemistoa nyt oli hieman erilainen. Sen sijaan ett\\xE4 k\\xE4yt\\xE4mme Add-metodia, laitamme arvot suoraan kutsumalla avainta, joka on t\\xE4ll\\xE4 kertaa \\\"Pekka\\\". T\\xE4ll\\xE4 tavalla voimme my\\xF6s p\\xE4ivitt\\xE4\\xE4 arvoa, johon avain osoittaa. T\\xE4m\\xE4 toimii kun annamme arvon avaimelle, vaikka avainta ei viel\\xE4 olisi hakemistossa.\"), mdx(\"p\", null, \"Jos haluamme etsi\\xE4 arvoa avaimella, jota ei ole olemassa, saamme kuitenkin virheen:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"static void Main(string[] args)\\n{\\n  Dictionary<string, string> phoneNumbers = new Dictionary<string, string>();\\n\\n  Console.WriteLine(\\\"Pekka's number \\\" + phoneNumbers[\\\"Pekka\\\"]);\\n\\n  phoneNumbers[\\\"Pekka\\\"] = \\\"09-111333\\\";\\n  Console.WriteLine(\\\"Pekka's number \\\" + phoneNumbers[\\\"Pekka\\\"]);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Unhandled exception. System.Collections.Generic.KeyNotFoundException: The given key 'Pekka' was not present in the dictionary.\\n\\n[. . .]\\n\")), mdx(\"p\", null, \"Ole tarkkana, kun k\\xE4sittelet dataa!\"), mdx(\"p\", null, \"Ent\\xE4 jos haluaisimme antaa yhdelle avaimelle useita arvoja, kuten useita puhelinnumeroita annetulle henkil\\xF6lle?\"), mdx(\"p\", null, \"Koska avaimet ja arvot hakemistossa voivat olla mit\\xE4 tahansa muuttujia, on my\\xF6s mahdollista k\\xE4ytt\\xE4\\xE4 listoja arvoina hakemistossa. Voit lis\\xE4t\\xE4 useampia arvoja yhdelle avaimelle liitt\\xE4m\\xE4ll\\xE4 listan avaimen per\\xE4\\xE4n. Muutetaan tapaa, jolla numerot tallennetaan seuraavasti:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Dictionary<string, List<string>> phoneNumbers = new Dictionary<string, List<string>>();\\n\\n// Lis\\xE4t\\xE4\\xE4n Pekka hakemistoon uudella listalla numeroita varten\\nphoneNumbers[\\\"Pekka\\\"] = new List<string>();\\n// Haetaan Pekan lista ja lis\\xE4t\\xE4\\xE4n numero listaan\\nphoneNumbers[\\\"Pekka\\\"].Add(\\\"040-12348765\\\");\\n// Haetaan Pekan lista ja lis\\xE4t\\xE4\\xE4n numero listaan\\nphoneNumbers[\\\"Pekka\\\"].Add(\\\"09-111333\\\");\\n\\nConsole.WriteLine(\\\"Pekka's numbers:\\\");\\n// Haetaan Pekan lista ja k\\xE4ytet\\xE4\\xE4n listan ForEach tulostamaan sis\\xE4lt\\xF6\\nphoneNumbers[\\\"Pekka\\\"].ForEach(Console.WriteLine);\\n\")), mdx(\"p\", null, \"T\\xE4m\\xE4 on t\\xE4sm\\xE4lleen sama kuin\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"Dictionary<string, List<string>> phoneNumbers = new Dictionary<string, List<string>>();\\n\\n// Lis\\xE4t\\xE4\\xE4n Pekka hakemistoon uudella listalla numeroita varten\\nphoneNumbers[\\\"Pekka\\\"] = new List<string>();\\n// Haetaan Pekan lista ja lis\\xE4t\\xE4\\xE4n numero listaan\\nphoneNumbers[\\\"Pekka\\\"].Add(\\\"040-12348765\\\");\\n// Haetaan Pekan lista ja lis\\xE4t\\xE4\\xE4n numero listaan\\nphoneNumbers[\\\"Pekka\\\"].Add(\\\"09-111333\\\");\\n\\nConsole.WriteLine(\\\"Pekka's numbers:\\\");\\n// Haetaan Pekan lista ja k\\xE4ytet\\xE4\\xE4n listaan foreach tulostamaan sis\\xE4lt\\xF6\\nforeach (string phone in phoneNumbers[\\\"Pekka\\\"]) \\n{\\n  Console.WriteLine(phone);\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Pekka's numbers:\\n040-12348765\\n09-111333\\n\")), mdx(\"p\", null, \"M\\xE4\\xE4rit\\xE4mme puhelinluettelon tyyppin\\xE4 Dictionary<string, List<string\", \">\", \">\", \". T\\xE4m\\xE4 viittaa hakemistoon, joka k\\xE4ytt\\xE4\\xE4 merkkijonoa avaimena ja listaa, joka sis\\xE4lt\\xE4\\xE4 merkkijonoja, arvonaan. T\\xE4ll\\xF6in hakemistoon lis\\xE4tt\\xE4v\\xE4t arvot ovat konkreettisia listoja.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"// Lis\\xE4t\\xE4\\xE4n Pekka hakemistoon uudella listalla numeroita varten\\nphoneNumbers.Add(\\\"Pekka\\\", new List<string>());\\n\")), mdx(\"p\", null, \"Voimme esimerkiksi implementoida harjoituspisteen seurantaj\\xE4rjestelm\\xE4n samalla tavalla. Alla oleva esimerkki hahmottelee \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TaskTracker\"), \"-luokkaa, joka sis\\xE4lt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4kohtaisen pisteen seurannan teht\\xE4vist\\xE4. K\\xE4ytt\\xE4j\\xE4 edustetaan merkkijonona ja pisteet kokonaislukuina.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"using System;\\nusing System.Collections.Generic;\\n\\nnamespace Exercise001\\n{\\n  public class TaskTracker\\n  {\\n    private Dictionary<string, List<int>> completedExercises;\\n\\n    public TaskTracker()\\n    {\\n      this.completedExercises = new Dictionary<string, List<int>>();\\n    }\\n\\n    public void Add(string user, int exercise)\\n    {\\n      // k\\xE4ytt\\xE4j\\xE4lle on lis\\xE4tt\\xE4v\\xE4 tyhj\\xE4 lista, jos sellaista ei ole jo lis\\xE4tty\\n      if (!this.completedExercises.ContainsKey(user)) {\\n        this.completedExercises.Add(user, new List<int>());\\n      }\\n      // haetaan ensin lista, joka sis\\xE4lt\\xE4\\xE4 k\\xE4ytt\\xE4j\\xE4n suorittamat teht\\xE4v\\xE4t ja lis\\xE4t\\xE4\\xE4n siihen\\n      List<int> completed = this.completedExercises[user];\\n      completed.Add(exercise);\\n\\n      // edellinen toimisi my\\xF6s ilman apumuuttujaa seuraavasti\\n      // this.completedExercises[user].Add[exercise];\\n    }\\n\\n    public void Print()\\n    {\\n      Dictionary<string, List<int>>.KeyCollection keys = this.completedExercises.Keys;\\n\\n      foreach (string name in keys)\\n      {\\n        foreach (int completed in this.completedExercises[name]) {\\n          Console.WriteLine(name + \\\": \\\" + completed);\\n        }\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"TaskTracker tracker = new TaskTracker();\\ntracker.Add(\\\"Ada\\\", 3);\\ntracker.Add(\\\"Ada\\\", 4);\\ntracker.Add(\\\"Ada\\\", 2);\\ntracker.Add(\\\"Ada\\\", 1);\\n\\ntracker.Add(\\\"Pekka\\\", 4);\\ntracker.Add(\\\"Pekka\\\", 3);\\n\\ntracker.Add(\\\"Matti\\\", 1);\\ntracker.Add(\\\"Matti\\\", 2);\\n\\ntracker.Print();\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"Ada: 3\\nAda: 4\\nAda: 2\\nAda: 1\\nPekka: 4\\nPekka: 3\\nMatti: 1\\nMatti: 2\\n\")), mdx(\"h1\", {\n    \"id\": \"tehtävät\"\n  }, \"Teht\\xE4v\\xE4t\"), mdx(Exercise, {\n    title: '008 Dictionary of Many Translations',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4n\\xE4si on luoda luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DictionaryOfManyTranslations\"), \". Siihen voi tallentaa yhden tai useamman k\\xE4\\xE4nn\\xF6ksen jokaiselle sanalle. Luokan tulee toteuttaa seuraavat metodit:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"public void Add(string word, string translation)\"), \" lis\\xE4\\xE4 sanalle k\\xE4\\xE4nn\\xF6ksen ja s\\xE4ilytt\\xE4\\xE4 vanhat k\\xE4\\xE4nn\\xF6kset.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"public List<string\", \">\", \" Translate(string word)\"), \" palauttaa listan, joka sis\\xE4lt\\xE4\\xE4 sanan k\\xE4\\xE4nn\\xF6kset. Jos sanalle ei ole lis\\xE4tty k\\xE4\\xE4nn\\xF6ksi\\xE4, metodin tulee palauttaa tyhj\\xE4 lista.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"public void Remove(string word)\"), \" poistaa sanan ja sen k\\xE4\\xE4nn\\xF6kset sanakirjasta. \")), mdx(\"p\", null, \"Lienee parasta tallentaa k\\xE4\\xE4nn\\xF6kset listana hakemistoon joka on tyyppi\\xE4 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dictionary<string, List<string\", \">\", \" >\")), mdx(\"p\", null, \"Esimerkki:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"DictionaryOfManyTranslations dictionary = new DictionaryOfManyTranslations();\\ndictionary.Add(\\\"lie\\\", \\\"maata\\\");\\ndictionary.Add(\\\"lie\\\", \\\"valehdella\\\");\\n\\ndictionary.Add(\\\"bow\\\", \\\"jousi\\\");\\ndictionary.Add(\\\"bow\\\", \\\"kumartaa\\\");\\n\\nforeach (string translation in dictionary.Translate(\\\"bow\\\"))\\n{\\n  Console.WriteLine(translation);\\n}\\nConsole.WriteLine();\\n\\nforeach (string translation in dictionary.Translate(\\\"lie\\\"))\\n{\\n  Console.WriteLine(translation);\\n}\\n\\ndictionary.Remove(\\\"bow\\\");\\nforeach (string translation in dictionary.Translate(\\\"bow\\\"))\\n{\\n  Console.WriteLine(translation);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"jousi\\nkumartaa\\n\\nmaata\\nvalehdella\\n\"))), mdx(Exercise, {\n    title: '009 Storage Facility',\n    mdxType: \"Exercise\"\n  }, mdx(\"p\", null, \"Teht\\xE4v\\xE4n\\xE4si on luoda luokka \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"StorageFacility\"), \", jota voidaan k\\xE4ytt\\xE4\\xE4 varastotilojen ja niiden sis\\xE4lt\\xE4mien tavaroiden seuraamiseen. Luokan tulee toteuttaa seuraavat metodit:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public void Add(string unit, string item)\"), \" lis\\xE4\\xE4 parametrina annetun tavaran (item) varastotilaan (unit), jonka nimi on my\\xF6s parametrina annettu.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public List<string\", \">\", \" Contents(string storageUnit)\"), \" palauttaa listan, joka sis\\xE4lt\\xE4\\xE4 kaikki parametrina annetun varastotilan tavarat. Jos varastotilaa ei ole tai jos sen on tyhj\\xE4, palautetaan tyhj\\xE4 lista.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"public void Remove(string storageUnit, string item)\"), \"  poistaa parametrina annetun tavaran parametrina annetusta varastotilasta.\"))), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Poista vain yksi esine -- jos varastotilassa on useita samannimisi\\xE4 esineit\\xE4, loput j\\xE4\\xE4v\\xE4t paikoilleen. Jos varastotila olisi tyhj\\xE4 poiston j\\xE4lkeen, poista my\\xF6s varastotila.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"public List<string\", \">\", \" StorageUnits()\"), \"  palauttaa listan, joka sis\\xE4lt\\xE4\\xE4 kaikki varastotilat. \")), mdx(Note, {\n    mdxType: \"Note\"\n  }, \"Vain ne varastotilat, jotka sis\\xE4lt\\xE4v\\xE4t tavaroita, listataan.\"), mdx(\"p\", null, \"Esimerkkikoodi:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"StorageFacility facility = new StorageFacility();\\nfacility.Add(\\\"a14\\\", \\\"ice skates\\\");\\nfacility.Add(\\\"a14\\\", \\\"ice hockey stick\\\");\\nfacility.Add(\\\"a14\\\", \\\"ice skates\\\");\\n\\nfacility.Add(\\\"f156\\\", \\\"rollerblades\\\");\\nfacility.Add(\\\"f156\\\", \\\"rollerblades\\\");\\n\\nfacility.Add(\\\"g63\\\", \\\"six\\\");\\nfacility.Add(\\\"g63\\\", \\\"pi\\\");\\n\\nforeach (string unit in facility.StorageUnits())\\n{\\n  Console.WriteLine(unit);\\n}\\n\\nforeach (string item in facility.Contents(\\\"a14\\\"))\\n{\\n  Console.WriteLine(item);\\n}\\n\\nforeach (string item in facility.Contents(\\\"f156\\\"))\\n{\\n  Console.WriteLine(item);\\n}\\nfacility.Remove(\\\"f156\\\", \\\"rollerblades\\\");\\n\\nforeach (string item in facility.Contents(\\\"f156\\\"))\\n{\\n  Console.WriteLine(item);\\n}\\n\\nfacility.Remove(\\\"f156\\\", \\\"rollerblades\\\");\\n\\nforeach (string unit in facility.StorageUnits())\\n{\\n  Console.WriteLine(unit);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-console\"\n  }, \"a14\\nf156\\ng63\\nice skates\\nice hockey stick\\nice skates\\nrollerblades\\nrollerblades\\nrollerblades\\na14\\ng63\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#tehtävät","title":"Tehtävät"}]},"frontmatter":{"title":"Datan ryhmittely hakemistoilla"}}},"pageContext":{"id":"1b1416a1-b56d-5303-bb4a-35965a2b5534"}},
    "staticQueryHashes": ["1885717130","1950529541","2744905544","3020054368"]}